{"remainingRequest":"/home/lucario/Documents/schoolOrganizer/frontend-vue/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lucario/Documents/schoolOrganizer/frontend-vue/app/src/components/Professors/Edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/lucario/Documents/schoolOrganizer/frontend-vue/app/src/components/Professors/Edit.vue","mtime":1574601584790},{"path":"/home/lucario/Documents/schoolOrganizer/frontend-vue/app/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/lucario/Documents/schoolOrganizer/frontend-vue/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/lucario/Documents/schoolOrganizer/frontend-vue/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\"\nimport route from \"@/router/\"\nimport { validationMixin } from 'vuelidate'\n\nimport { required, maxLength } from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'EditProfessor',\n  created () {\n    this.getProfessorInfo()\n  },\n  mixins: [validationMixin],\n\n  validations: {\n    professor: {\n      first_name: {\n        maxLength: maxLength(100),\n        required\n      },\n      middle_name: {\n        maxLength: maxLength(100),\n      },\n      last_name: {\n        maxLength: maxLength(100),\n        required\n      },\n    }\n  },\n\n  data () {\n    return {\n      first_name: \"\",\n      middle_name: \"\",\n      last_name: \"\",\n      professor: {}\n    }\n  },\n  computed: {\n    first_nameErrors () {\n      const errors = []\n      if (!this.$v.professor.first_name.$dirty) return errors\n      !this.$v.professor.first_name.maxLength && errors.push('Name must be at most 100 characters long')\n      !this.$v.professor.first_name.required && errors.push('Name is required.')\n\n    },\n    middle_nameErrors () {\n      const errors = []\n      if (!this.$v.professor.middle_name.$dirty) return errors\n      !this.$v.professor.middle_name.maxLength && errors.push('Middle Name must be at most 100 characters long')\n      return errors\n    },\n    last_nameErrors () {\n      const errors = []\n      if (!this.$v.professor.last_name.$dirty) return errors\n      !this.$v.professor.last_name.maxLength && errors.push('Last Name must be at most 100 characters long')\n      !this.$v.professor.last_name.required && errors.push('Last Name is required.')\n      return errors\n    },\n  },\n  methods: {\n    getProfessorInfo() {\n      axios\n        .request({\n          baseURL: \"http://localhost:8000\",\n          method: \"get\",\n          url: `/api/professors/get/${this.$route.params.id}/`\n        })\n        .then(res => {\n          this.professor = res.data\n          console.log(res)\n        });\n    },\n    submit () {\n      axios\n        .put(\n          `http://localhost:8000/api/professors/edit/${this.$route.params.id}/`,\n          this.professor, \n          {\n            headers: {\n              Authorization: `Token ${this.$session.get(\"token\")}`\n            }\n          }\n        )\n        .then(res => {\n          route.push('/professors/')\n          console.log(res)\n        });\n    },\n    clear () {\n      route.push('/professors/')\n    },\n  }\n}\n",{"version":3,"sources":["Edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Edit.vue","sourceRoot":"src/components/Professors","sourcesContent":["<template>\n  <v-container>\n    <h1>Edit professor Info</h1>\n    <form>\n      <v-text-field\n        v-model=\"professor.first_name\"\n        :error-messages=\"first_nameErrors\"\n        :counter=\"100\"\n        label=\"Name\"\n        required\n        @input=\"$v.professor.fist_name.$touch()\"\n        @blur=\"$v.professor.first_name.$touch()\"\n      ></v-text-field>\n      <v-text-field\n        v-model=\"professor.middle_name\"\n        :error-messages=\"middle_nameErrors\"\n        :counter=\"100\"\n        label=\"Middle Name\"\n        required\n        @input=\"$v.professor.middle_name.$touch()\"\n        @blur=\"$v.professor.middle_name.$touch()\"\n      ></v-text-field>\n      <v-text-field\n        v-model=\"professor.last_name\"\n        :error-messages=\"last_nameErrors\"\n        :counter=\"100\"\n        label=\"Last Name\"\n        required\n        @input=\"$v.professor.last_name.$touch()\"\n        @blur=\"$v.professor.last_name.$touch()\"\n      ></v-text-field>\n\n      <v-btn class=\"mr-4\" @click=\"submit\">Editar</v-btn>\n      <v-btn @click=\"clear\">Voltar</v-btn>\n    </form>\n  </v-container>\n</template>\n\n<script>\nimport axios from \"axios\"\nimport route from \"@/router/\"\nimport { validationMixin } from 'vuelidate'\n\nimport { required, maxLength } from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'EditProfessor',\n  created () {\n    this.getProfessorInfo()\n  },\n  mixins: [validationMixin],\n\n  validations: {\n    professor: {\n      first_name: {\n        maxLength: maxLength(100),\n        required\n      },\n      middle_name: {\n        maxLength: maxLength(100),\n      },\n      last_name: {\n        maxLength: maxLength(100),\n        required\n      },\n    }\n  },\n\n  data () {\n    return {\n      first_name: \"\",\n      middle_name: \"\",\n      last_name: \"\",\n      professor: {}\n    }\n  },\n  computed: {\n    first_nameErrors () {\n      const errors = []\n      if (!this.$v.professor.first_name.$dirty) return errors\n      !this.$v.professor.first_name.maxLength && errors.push('Name must be at most 100 characters long')\n      !this.$v.professor.first_name.required && errors.push('Name is required.')\n\n    },\n    middle_nameErrors () {\n      const errors = []\n      if (!this.$v.professor.middle_name.$dirty) return errors\n      !this.$v.professor.middle_name.maxLength && errors.push('Middle Name must be at most 100 characters long')\n      return errors\n    },\n    last_nameErrors () {\n      const errors = []\n      if (!this.$v.professor.last_name.$dirty) return errors\n      !this.$v.professor.last_name.maxLength && errors.push('Last Name must be at most 100 characters long')\n      !this.$v.professor.last_name.required && errors.push('Last Name is required.')\n      return errors\n    },\n  },\n  methods: {\n    getProfessorInfo() {\n      axios\n        .request({\n          baseURL: \"http://localhost:8000\",\n          method: \"get\",\n          url: `/api/professors/get/${this.$route.params.id}/`\n        })\n        .then(res => {\n          this.professor = res.data\n          console.log(res)\n        });\n    },\n    submit () {\n      axios\n        .put(\n          `http://localhost:8000/api/professors/edit/${this.$route.params.id}/`,\n          this.professor, \n          {\n            headers: {\n              Authorization: `Token ${this.$session.get(\"token\")}`\n            }\n          }\n        )\n        .then(res => {\n          route.push('/professors/')\n          console.log(res)\n        });\n    },\n    clear () {\n      route.push('/professors/')\n    },\n  }\n}\n</script>"]}]}